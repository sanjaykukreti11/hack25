You are given information about an integration channel, including the channel type (API-based or file-based), the API request body (if applicable), and its functional purpose.

Your task is to generate a configuration JSON following strict schema rules, using both static and dynamically inferred fields.

CHANNEL TYPES & RULES:

If the channel is API-based (i.e., it involves calling an API endpoint with a request body):

Static Fields (Always the same):

"actionType": "marTech"

"productType": ["symphony_v2"]

"fileType": "json"

"isDefault": true

"shouldAllowComplexMapping": true


"mappingMetadata":

"enableEnrichers": true

"enableCustomSourceField": true

"mappingCategoryMetadata":[

category: "attributes"

displayName: "Attributes"

allowCustomAttribute: true

structureType: { "attributes": "Object" }

skipCategoryNamePrefix: false
]

"customFields": {

"isDeltaEnabled": false

"transformationAtDE": false

"fullRefreshTTL": 10000
}

Dynamic Fields:
"intPartnerId": Use the provided value from the API documentation if available (e.g., intPartnerId: 6878). Do not use a static ID if one is explicitly provided.

"actionName": Generate a meaningful name based on the API’s purpose or description (e.g., “Send Attributes to Emarsys”).// this is mandatory, give some name and should be in config json

"actionMetadata": { "description": "" } : fill some meaningful description, about this action, one liner



"mappingMetadata.mappingDetails": ( for this your source will be only, api curl request body) Extract all top-level and nested keys from the API request body of the api curl, request body (not from response), also in the request body, see if there any attribute which you find it should be user input, then don't add it to the mapping details.

 For each key, generate a mapping object using:

"name": the full path to the field using dot notation (e.g., user.profile.firstName). Do not include array indices or square brackets.

"displayName": Convert field names into human-friendly labels (e.g., first_name → First Name).

"category": "attributes"

"dataType": Infer from the value (e.g., string, integer, boolean, list, object, objectlist)

"inputType": "multiSelectDropdown"

"type": "attribute"

"mandatory": false

"highlightDataTypeMismatchForListType": true

"structureType": An object mapping each segment of the path to its type (e.g., { "user": "object", "profile": "object", "firstName": "string" })

"zeotapMappedAttribute": []

Important: Use only the request body to infer attributes for mapping. Do not extract from the API response or other sections. If a field is a list of objects, use "objectlist" as the type. If it’s a simple list, use "list".

If the channel is file-based (e.g., data is sent via SFTP, FTP, GCS uploads):

Static Fields (Always the same):

"actionType": "marTech"

"productType": ["audience"]

"fileType": "json"

"isDefault": true

"shouldAllowComplexMapping": true



"mappingMetadata":

"enableEnrichers": true

"enableCustomSourceField": true

"mappingCategoryMetadata": [

category: "attributes"

displayName: "Attributes"

allowCustomAttribute: true

structureType: { "attributes": "Object" }

skipCategoryNamePrefix: false
]

"mappingDetails": [] (leave this empty)

"customFields":

"isDeltaEnabled": false

"transformationAtDE": false

"fullRefreshTTL": 10000

Dynamic Fields:

"intPartnerId": Use the value from the file-based documentation if provided. Otherwise, use 6878 as default.

"actionName": Generate this based on the purpose of the file upload (e.g., “Upload Audience to SFTP”).


"actionMetadata": { "description": "" } : fill some meaningful description, about this action, one liner


Important:

Do not try to extract any mappingDetails from the file-based data structure. The mappingDetails field must be empty in file-based configurations.

Only set the dynamic fields: intPartnerId and actionName.

Final Output:

Return only the generated configuration JSON.

Do not include any explanation or surrounding text.