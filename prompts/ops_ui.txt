You are given documentation or descriptive text about an API. Your task is to dynamically generate a configuration JSON using the structure and rules below.
"channelTemplate": {}
"integrationType": "RealTime"
"integrationPartnerMetadata.channelId": "120"
"integrationPartnerMetadata.channelType": 1
"integrationPartnerMetadata.destinationType": "Creation"
"integrationPartnerMetadata.destinationMetaData.clientId": {
  "secret": true,
  "type": "text",
  "description": "Enter some unique instance name for this destination",
  "masked": true,
  "masked_type": "PARTIALLY",
  "name": "Destination Instance"
}

Dynamic Fields (Extract from the API documentation):
intId: Use intPartnerId if available; otherwise, use intId.

intPartnerName: Extract the integration partner name (e.g., Emarsys, Salesforce, or if it file based upload, give the cloud platform name).

destinationMetaData:

Identify user-provided inputs required to call the API:

Values needed in the URL, headers, or query parameters.

Do NOT include values that go in the body payload unless they are credentials or identifiers.

For each such parameter, create an object using this structure:

{
  "secret": true,
  "type": "text",
  "description": "", // Add a meaningful description
  "masked": true,
  "masked_type": "PARTIALLY",
  "name": "<Human-readable parameter name>"
}


The key should be an internal identifier (e.g., bearerToken, eventId).

The name should be human-friendly (e.g., Bearer Token, Event Id).
channelDescription.shortDesc = give some meaningful one liner description about the channel.
channelDescription.longDesc = give some meaningful 3-4 liner description about the channel.
Do not duplicate clientId—it must always be included with its static structure.
{
  "channelTemplate": {},
  "integrationType": "RealTime",
  "integrationPartnerMetadata": {
    "intId": "3424",
    "channelId": "120",
    "intPartnerName": "Emarsys",
    "destinationMetaData": {
      "bearerToken": {
        "secret": true,
        "type": "text",
        "description": "Bearer token for authenticating requests",
        "masked": true,
        "masked_type": "PARTIALLY",
        "name": "Bearer Token"
      },
      "clientId": {
        "secret": true,
        "type": "text",
        "description": "",
        "masked": true,
        "masked_type": "PARTIALLY",
        "name": "Destination Instance"
      },
      "eventId": {
        "secret": true,
        "type": "text",
        "description": "Identifier for the event to be triggered",
        "masked": true,
        "masked_type": "PARTIALLY",
        "name": "Event Id"
      }
    },
    "channelType": 1,
    "destinationType": "Creation",
    "channelDescription": {

    "shortDesc" : "hi",
    "longDesc" : "longDesc"
    }
  }
}

Use the API information provided to:

Extract and assign the intId and intPartnerName.

Identify and define all required credential or ID values needed for URL, headers, or params under destinationMetaData.


FTP/SFTP Special Handling:
If the integration is FTP or SFTP-based (e.g., the documentation mentions FTP/SFTP protocols or file transfers):
{
  "host": {
    "secret": true,
    "type": "text",
    "description": "Hostname or IP address of the FTP/SFTP server",
    "masked": true,
    "masked_type": "PARTIALLY",
    "name": "FTP/SFTP Host"
  },
  "port": {
    "secret": true,
    "type": "text",
    "description": "Port to connect to on the FTP/SFTP server",
    "masked": true,
    "masked_type": "PARTIALLY",
    "name": "FTP/SFTP Port"
  },
  "username": {
    "secret": true,
    "type": "text",
    "description": "Username for FTP/SFTP authentication",
    "masked": true,
    "masked_type": "PARTIALLY",
    "name": "FTP/SFTP Username"
  },
  "password": {
    "secret": true,
    "type": "text",
    "description": "Password for FTP/SFTP authentication",
    "masked": true,
    "masked_type": "PARTIALLY",
    "name": "FTP/SFTP Password"
  },
  "remotePath": {
    "secret": true,
    "type": "text",
    "description": "Remote path where files are to be uploaded or read",
    "masked": true,
    "masked_type": "PARTIALLY",
    "name": "FTP/SFTP Remote Path"
  }
}

AWS S3 Special Handling:
If the integration is S3-based (e.g., the documentation mentions S3 AWS protocols or file transfers):
{
  "bucketName": {
    "secret": true,
    "type": "text",
    "description": "Name of the S3 bucket where files are stored or retrieved from",
    "masked": true,
    "masked_type": "PARTIALLY",
    "name": "S3 Bucket Name"
  },
  "region": {
    "secret": true,
    "type": "text",
    "description": "AWS region where the S3 bucket is hosted",
    "masked": true,
    "masked_type": "PARTIALLY",
    "name": "AWS Region"
  },
  "accessKey": {
    "secret": true,
    "type": "text",
    "description": "AWS Access Key ID for accessing the S3 bucket",
    "masked": true,
    "masked_type": "PARTIALLY",
    "name": "AWS Access Key ID"
  },
  "secretKey": {
    "secret": true,
    "type": "text",
    "description": "AWS Secret Access Key for accessing the S3 bucket",
    "masked": true,
    "masked_type": "PARTIALLY",
    "name": "AWS Secret Access Key"
  }
}


integrationType = RealTime / Batch
if it is api based then RealTime, otherwise if it is cloud based then Batch.

Return only the generated configuration JSON.

Do not include any explanatory text—only return the final JSON.